syntax = "proto3";

option csharp_namespace = "Grpc";

// Disposition values:
// 0 - Incomplete
// 1 - Error
// 2 - Denied
// 3 - Issued
// 4 - Issued out of band
// 5 - Under Submission

service CAService {
	rpc SubmitCSR (SubmitCSRRequest) returns (SubmitCSRReply);

	rpc GetCAs (GetCAsRequest) returns (GetCAsReply);
	rpc GetCertificate (GetCertificateRequest) returns (GetCertificateReply);
	rpc GetTemplates (GetTemplatesRequest) returns (GetTemplatesReply);
	rpc GetCSRStatus (GetCSRStatusRequest) returns (GetCSRStatusReply);

	rpc SetOption (SetOptionRequest) returns (SetOptionReply);
	rpc GetOptions (GetOptionsRequest) returns (GetOptionsReply);
	
	rpc RevokeCertificate (RevokeCertificateRequest) returns (RevokeCertificateReply);
	rpc GetCertificateValidity (GetCertificateValidityRequest) returns (GetCertificateValidityReply);
}

// Represents the COM execution status. If an error occured, the code is != 0 and the exception message will be set.
message Status {
	int32 code = 1;
	string message = 2;
}

message SetOptionRequest {
	string optionName = 1;
	string optionValue = 2;
}

message SetOptionReply {
	Status status = 1;
}


message GetOptionsRequest {

}

message GetOptionsReply {
	map<string, string> options = 1;
	Status status = 2;
}


message SubmitCSRRequest {
	string csr = 1;
	string templateName = 2;
	string caName = 3;
}

message SubmitCSRReply {
	int32 disposition = 1;
	string dispositionMessage = 2;
	int32 requestId = 3;
	Status status = 5;
}


message GetCAsRequest {
}

message GetCAsReply {
	repeated string caNames = 1;
	Status status = 2;
}


message GetCertificateRequest {
	string caName = 1;
	int32 id = 2;
}

message GetCertificateReply {
	string cert = 1;
	Status status = 2;
}


message GetTemplatesRequest {
	string caName = 1;
}

message GetTemplatesReply {
	repeated string templateNames = 1;
	Status status = 2;
}


message GetCSRStatusRequest {
	string caName = 1;
	oneof IDorSerial {
		int32 certRequestId = 2;
		string certSerial = 3;
	}
}

message GetCSRStatusReply {
	int32 disposition = 1;
	string dispositionMessage = 2;
	Status status = 3;
}

enum RevokationReason {
	UNSPECIFIED = 0;
	KEY_COMPROMISE = 1;
	CA_COMPROMISE = 2;
	AFFILIATION_CHANGED = 3;
	SUPERSEDED = 4;
	CESSATION_OF_OPERATION = 5;
	CERTIFICATE_HOLD = 6;
}

message RevokeCertificateRequest {
	string caName = 1;
	string serialNumber = 2;
	RevokationReason reason = 3;
	// UnixTime. Specify if the revocation should be in future.
	// Set to 0 (or don't set at all) to do the recovation immediately.
	optional int64 date = 4;
}

// Currently only returns the COM execution status because ICertAdmin::RevokeCertificate (as typelib) does not return anything.
// Probably useful to call GetCertificateValidity if revocation should be done immediately to check for status
message RevokeCertificateReply {
	Status status = 1;
}


enum CertificateValidity {
	INCOMPLETE = 0; // The call was not completed. 
	ERROR = 1;		// The call failed.
	REVOKED = 2;
	VALID = 3;
	INVALID = 4;	// The certificate was never issued.
	UNDER_SUBMISSION = 5;
}

message GetCertificateValidityRequest {
	string caName = 1;
	string serialNumber = 2;
}


message GetCertificateValidityReply {
	Status status = 1;
	CertificateValidity validity = 2;
}